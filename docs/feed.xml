<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://vladflore.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vladflore.github.io/" rel="alternate" type="text/html" /><updated>2021-01-17T21:01:43+01:00</updated><id>https://vladflore.github.io/feed.xml</id><title type="html">VF_Tech</title><subtitle>A place to share stuff about software engineering and life...but mostly about software engineering</subtitle><entry><title type="html">Pet Project (3/)</title><link href="https://vladflore.github.io/pet-project-part3" rel="alternate" type="text/html" title="Pet Project (3/)" /><published>2020-10-06T00:00:00+02:00</published><updated>2020-10-06T00:00:00+02:00</updated><id>https://vladflore.github.io/pet-project-part3</id><content type="html" xml:base="https://vladflore.github.io/pet-project-part3">&lt;p&gt;This is &lt;strong&gt;part 3&lt;/strong&gt; of the &lt;strong&gt;Pet Project series&lt;/strong&gt; about building a small web application from scratch.&lt;/p&gt;

&lt;h3 id=&quot;the-road-so-far&quot;&gt;The road so far&lt;/h3&gt;

&lt;p&gt;Check the other posts to see where we are coming from:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/pet-project-part1&quot;&gt;part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/pet-project-part2&quot;&gt;part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;status-quo&quot;&gt;Status Quo&lt;/h3&gt;

&lt;p&gt;After some time off and handling some other responsibilities, here is a new post on building
a small web application from scratch. With this update we went pretty far on the implementation road, and we are now one step closer
to having a functional backend. Just as a reminder, the application we are building is a shopping list application with the help of which
the user can manage their shopping experience by keeping track shopping lists and their items.&lt;/p&gt;

&lt;p&gt;This is what we have achieved with this iteration:&lt;/p&gt;

&lt;h4 id=&quot;endpoints-for-handling-items-and-shopping-lists&quot;&gt;Endpoints for handling items and shopping lists&lt;/h4&gt;

&lt;p&gt;Following endpoints are now available(textual description):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create an item&lt;/li&gt;
  &lt;li&gt;get the items, either all of them, or by name&lt;/li&gt;
  &lt;li&gt;create a shopping list&lt;/li&gt;
  &lt;li&gt;get the shopping lists, either all of them, or by name&lt;/li&gt;
  &lt;li&gt;get items belonging to a shopping lists&lt;/li&gt;
  &lt;li&gt;add item to a shopping list&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;embedded-h2-database&quot;&gt;Embedded H2 database&lt;/h4&gt;

&lt;p&gt;To store the application’s data we use for now an &lt;a href=&quot;https://www.h2database.com/html/cheatSheet.html&quot;&gt;embedded H2 database&lt;/a&gt;, configured to save its files on the file system (see &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&quot;h2-compliant-script&quot;&gt;H2 compliant script&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;schema.sql&lt;/code&gt;, is a script which is executed when the app starts and creates the database objects required by the application (a complete wipe takes place beforehand).&lt;/p&gt;

&lt;h4 id=&quot;not-so-dummy-data&quot;&gt;Not so dummy data&lt;/h4&gt;

&lt;p&gt;To populate the database with real-life data we use a &lt;code class=&quot;highlighter-rouge&quot;&gt;CommandLineRunner&lt;/code&gt; bean, which reads a &lt;code class=&quot;highlighter-rouge&quot;&gt;.csv&lt;/code&gt; file and inserts the data into the database.&lt;/p&gt;

&lt;h4 id=&quot;test-script&quot;&gt;Test script&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requests.sh&lt;/code&gt; is a test script, which depicts a real life scenario.
I actually used the IntelliJ feature &lt;em&gt;Generate HTTP Request&lt;/em&gt; to generate the requests and then I packed them all in an executable file.&lt;/p&gt;

&lt;h4 id=&quot;java-11-support&quot;&gt;Java 11 support&lt;/h4&gt;

&lt;p&gt;The project uses now Java 11 (keeping up with the Java LTS versions).&lt;/p&gt;

&lt;h3 id=&quot;technical-implementation-aspects&quot;&gt;Technical implementation aspects&lt;/h3&gt;

&lt;p&gt;I tried to keep things as simple as possible and to follow good software development practices.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; This is a work in progress and things &lt;em&gt;will&lt;/em&gt; definitely change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That being said, here is a summary of the development experience and status quo.&lt;/p&gt;

&lt;p&gt;I went with a &lt;em&gt;slightly&lt;/em&gt; different version of &lt;strong&gt;package by feature&lt;/strong&gt; approach for organizing the code.
With this approach we have two packages, which bring the attention to the domain of the application.
Each package contains everything related to the &lt;em&gt;feature&lt;/em&gt; in question.
The Domain comprises currently &lt;em&gt;items&lt;/em&gt; and &lt;em&gt;shopping lists&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The constituents of each &lt;em&gt;feature&lt;/em&gt; package follow a &lt;strong&gt;layered architecture&lt;/strong&gt;.
This dictates that one layer should only communicate with the layer directly below it.
In this case we have something similar to the following diagram:&lt;/p&gt;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; contentScriptType=&quot;application/ecmascript&quot; contentStyleType=&quot;text/css&quot; height=&quot;459px&quot; preserveAspectRatio=&quot;none&quot; style=&quot;width:764px;height:459px;&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 764 459&quot; width=&quot;764px&quot; zoomAndPan=&quot;magnify&quot;&gt;&lt;defs&gt;&lt;filter height=&quot;300%&quot; id=&quot;f1tczms5tyn6fn&quot; width=&quot;300%&quot; x=&quot;-1&quot; y=&quot;-1&quot;&gt;&lt;feGaussianBlur result=&quot;blurOut&quot; stdDeviation=&quot;2.0&quot;/&gt;&lt;feColorMatrix in=&quot;blurOut&quot; result=&quot;blurOut2&quot; type=&quot;matrix&quot; values=&quot;0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0&quot;/&gt;&lt;feOffset dx=&quot;4.0&quot; dy=&quot;4.0&quot; in=&quot;blurOut2&quot; result=&quot;blurOut3&quot;/&gt;&lt;feBlend in=&quot;SourceGraphic&quot; in2=&quot;blurOut3&quot; mode=&quot;normal&quot;/&gt;&lt;/filter&gt;&lt;/defs&gt;&lt;g&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;18&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;122&quot; x=&quot;327&quot; y=&quot;16.708&quot;&gt;Sholia Project&lt;/text&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;18&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;248&quot; x=&quot;264&quot; y=&quot;37.6611&quot;&gt;Packages and Collaborators&lt;/text&gt;&lt;!--MD5=[338377fed93ec0d0cef657a61317d712]
cluster tech.vladflore.sholia--&gt;&lt;polygon fill=&quot;#FFFFFF&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; points=&quot;22,65.9063,191,65.9063,198,88.2031,742,88.2031,742,447.9063,22,447.9063,22,65.9063&quot; style=&quot;stroke: #000000; stroke-width: 1.5;&quot;/&gt;&lt;line style=&quot;stroke: #000000; stroke-width: 1.5;&quot; x1=&quot;22&quot; x2=&quot;198&quot; y1=&quot;88.2031&quot; y2=&quot;88.2031&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;14&quot; font-weight=&quot;bold&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;163&quot; x=&quot;26&quot; y=&quot;80.9014&quot;&gt;tech.vladflore.sholia&lt;/text&gt;&lt;!--MD5=[d5f371a3d3d5175dccd7e63476fa7c75]
cluster item--&gt;&lt;polygon fill=&quot;#FFFFFF&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; points=&quot;562,108.9063,605,108.9063,612,131.2031,718,131.2031,718,423.9063,562,423.9063,562,108.9063&quot; style=&quot;stroke: #000000; stroke-width: 1.5;&quot;/&gt;&lt;line style=&quot;stroke: #000000; stroke-width: 1.5;&quot; x1=&quot;562&quot; x2=&quot;612&quot; y1=&quot;131.2031&quot; y2=&quot;131.2031&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;14&quot; font-weight=&quot;bold&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;37&quot; x=&quot;566&quot; y=&quot;123.9014&quot;&gt;item&lt;/text&gt;&lt;!--MD5=[ecf5313af7ca93cb8c50221a25781608]
cluster shoppinglist--&gt;&lt;polygon fill=&quot;#FFFFFF&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; points=&quot;332,108.9063,436,108.9063,443,131.2031,538,131.2031,538,423.9063,332,423.9063,332,108.9063&quot; style=&quot;stroke: #000000; stroke-width: 1.5;&quot;/&gt;&lt;line style=&quot;stroke: #000000; stroke-width: 1.5;&quot; x1=&quot;332&quot; x2=&quot;443&quot; y1=&quot;131.2031&quot; y2=&quot;131.2031&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;14&quot; font-weight=&quot;bold&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;98&quot; x=&quot;336&quot; y=&quot;123.9014&quot;&gt;shoppinglist&lt;/text&gt;&lt;!--MD5=[77140a42179fe8241cde5d77dd05aadc]
cluster config--&gt;&lt;polygon fill=&quot;#FFFFFF&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; points=&quot;46,108.9063,101,108.9063,108,131.2031,308,131.2031,308,207.9063,46,207.9063,46,108.9063&quot; style=&quot;stroke: #000000; stroke-width: 1.5;&quot;/&gt;&lt;line style=&quot;stroke: #000000; stroke-width: 1.5;&quot; x1=&quot;46&quot; x2=&quot;108&quot; y1=&quot;131.2031&quot; y2=&quot;131.2031&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;14&quot; font-weight=&quot;bold&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;49&quot; x=&quot;50&quot; y=&quot;123.9014&quot;&gt;config&lt;/text&gt;&lt;!--MD5=[27654cd29a9e91365879b1401fdc7b0e]
class ItemController--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; height=&quot;48&quot; id=&quot;ItemController&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;118&quot; x=&quot;581&quot; y=&quot;143.9063&quot;/&gt;&lt;ellipse cx=&quot;596&quot; cy=&quot;159.9063&quot; fill=&quot;#ADD1B2&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M598.4844,165.7813 Q597.9063,166.0938 597.2656,166.25 Q596.625,166.4063 595.9219,166.4063 Q593.4063,166.4063 592.0781,164.7344 Q590.7656,163.0625 590.7656,159.9063 Q590.7656,156.75 592.0781,155.0781 Q593.4063,153.4063 595.9219,153.4063 Q596.625,153.4063 597.2656,153.5625 Q597.9219,153.7188 598.4844,154.0313 L598.4844,156.8281 Q597.8438,156.25 597.25,155.9844 Q596.6563,155.7188 596.0313,155.7188 Q594.6875,155.7188 594,156.7813 Q593.3125,157.8281 593.3125,159.9063 Q593.3125,161.9844 594,163.0469 Q594.6875,164.0938 596.0313,164.0938 Q596.6563,164.0938 597.25,163.8281 Q597.8438,163.5625 598.4844,162.9844 L598.4844,165.7813 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;86&quot; x=&quot;610&quot; y=&quot;164.0551&quot;&gt;ItemController&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;582&quot; x2=&quot;698&quot; y1=&quot;175.9063&quot; y2=&quot;175.9063&quot;/&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;582&quot; x2=&quot;698&quot; y1=&quot;183.9063&quot; y2=&quot;183.9063&quot;/&gt;&lt;!--MD5=[5ee510b617988fb328de72a9e1ecfcf9]
class ItemService--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; height=&quot;48&quot; id=&quot;ItemService&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;104&quot; x=&quot;588&quot; y=&quot;251.9063&quot;/&gt;&lt;ellipse cx=&quot;603&quot; cy=&quot;267.9063&quot; fill=&quot;#ADD1B2&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M605.4844,273.7813 Q604.9063,274.0938 604.2656,274.25 Q603.625,274.4063 602.9219,274.4063 Q600.4063,274.4063 599.0781,272.7344 Q597.7656,271.0625 597.7656,267.9063 Q597.7656,264.75 599.0781,263.0781 Q600.4063,261.4063 602.9219,261.4063 Q603.625,261.4063 604.2656,261.5625 Q604.9219,261.7188 605.4844,262.0313 L605.4844,264.8281 Q604.8438,264.25 604.25,263.9844 Q603.6563,263.7188 603.0313,263.7188 Q601.6875,263.7188 601,264.7813 Q600.3125,265.8281 600.3125,267.9063 Q600.3125,269.9844 601,271.0469 Q601.6875,272.0938 603.0313,272.0938 Q603.6563,272.0938 604.25,271.8281 Q604.8438,271.5625 605.4844,270.9844 L605.4844,273.7813 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;72&quot; x=&quot;617&quot; y=&quot;272.0551&quot;&gt;ItemService&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;589&quot; x2=&quot;691&quot; y1=&quot;283.9063&quot; y2=&quot;283.9063&quot;/&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;589&quot; x2=&quot;691&quot; y1=&quot;291.9063&quot; y2=&quot;291.9063&quot;/&gt;&lt;!--MD5=[ce1398305a9b40be4cd6d90fd229e3b0]
class ItemRepository--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; height=&quot;48&quot; id=&quot;ItemRepository&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;123&quot; x=&quot;578.5&quot; y=&quot;359.9063&quot;/&gt;&lt;ellipse cx=&quot;593.5&quot; cy=&quot;375.9063&quot; fill=&quot;#ADD1B2&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M595.9844,381.7813 Q595.4063,382.0938 594.7656,382.25 Q594.125,382.4063 593.4219,382.4063 Q590.9063,382.4063 589.5781,380.7344 Q588.2656,379.0625 588.2656,375.9063 Q588.2656,372.75 589.5781,371.0781 Q590.9063,369.4063 593.4219,369.4063 Q594.125,369.4063 594.7656,369.5625 Q595.4219,369.7188 595.9844,370.0313 L595.9844,372.8281 Q595.3438,372.25 594.75,371.9844 Q594.1563,371.7188 593.5313,371.7188 Q592.1875,371.7188 591.5,372.7813 Q590.8125,373.8281 590.8125,375.9063 Q590.8125,377.9844 591.5,379.0469 Q592.1875,380.0938 593.5313,380.0938 Q594.1563,380.0938 594.75,379.8281 Q595.3438,379.5625 595.9844,378.9844 L595.9844,381.7813 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;91&quot; x=&quot;607.5&quot; y=&quot;380.0551&quot;&gt;ItemRepository&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;579.5&quot; x2=&quot;700.5&quot; y1=&quot;391.9063&quot; y2=&quot;391.9063&quot;/&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;579.5&quot; x2=&quot;700.5&quot; y1=&quot;399.9063&quot; y2=&quot;399.9063&quot;/&gt;&lt;!--MD5=[ce1c73f49b43c541016db0533fb36a0b]
class ShoppingListController--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; height=&quot;48&quot; id=&quot;ShoppingListController&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;169&quot; x=&quot;350.5&quot; y=&quot;143.9063&quot;/&gt;&lt;ellipse cx=&quot;365.5&quot; cy=&quot;159.9063&quot; fill=&quot;#ADD1B2&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M367.9844,165.7813 Q367.4063,166.0938 366.7656,166.25 Q366.125,166.4063 365.4219,166.4063 Q362.9063,166.4063 361.5781,164.7344 Q360.2656,163.0625 360.2656,159.9063 Q360.2656,156.75 361.5781,155.0781 Q362.9063,153.4063 365.4219,153.4063 Q366.125,153.4063 366.7656,153.5625 Q367.4219,153.7188 367.9844,154.0313 L367.9844,156.8281 Q367.3438,156.25 366.75,155.9844 Q366.1563,155.7188 365.5313,155.7188 Q364.1875,155.7188 363.5,156.7813 Q362.8125,157.8281 362.8125,159.9063 Q362.8125,161.9844 363.5,163.0469 Q364.1875,164.0938 365.5313,164.0938 Q366.1563,164.0938 366.75,163.8281 Q367.3438,163.5625 367.9844,162.9844 L367.9844,165.7813 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;137&quot; x=&quot;379.5&quot; y=&quot;164.0551&quot;&gt;ShoppingListController&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;351.5&quot; x2=&quot;518.5&quot; y1=&quot;175.9063&quot; y2=&quot;175.9063&quot;/&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;351.5&quot; x2=&quot;518.5&quot; y1=&quot;183.9063&quot; y2=&quot;183.9063&quot;/&gt;&lt;!--MD5=[c0a34a28932b3ee2d6e5cfd7feaf1102]
class ShoppingListService--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; height=&quot;48&quot; id=&quot;ShoppingListService&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;155&quot; x=&quot;357.5&quot; y=&quot;251.9063&quot;/&gt;&lt;ellipse cx=&quot;372.5&quot; cy=&quot;267.9063&quot; fill=&quot;#ADD1B2&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M374.9844,273.7813 Q374.4063,274.0938 373.7656,274.25 Q373.125,274.4063 372.4219,274.4063 Q369.9063,274.4063 368.5781,272.7344 Q367.2656,271.0625 367.2656,267.9063 Q367.2656,264.75 368.5781,263.0781 Q369.9063,261.4063 372.4219,261.4063 Q373.125,261.4063 373.7656,261.5625 Q374.4219,261.7188 374.9844,262.0313 L374.9844,264.8281 Q374.3438,264.25 373.75,263.9844 Q373.1563,263.7188 372.5313,263.7188 Q371.1875,263.7188 370.5,264.7813 Q369.8125,265.8281 369.8125,267.9063 Q369.8125,269.9844 370.5,271.0469 Q371.1875,272.0938 372.5313,272.0938 Q373.1563,272.0938 373.75,271.8281 Q374.3438,271.5625 374.9844,270.9844 L374.9844,273.7813 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;123&quot; x=&quot;386.5&quot; y=&quot;272.0551&quot;&gt;ShoppingListService&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;358.5&quot; x2=&quot;511.5&quot; y1=&quot;283.9063&quot; y2=&quot;283.9063&quot;/&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;358.5&quot; x2=&quot;511.5&quot; y1=&quot;291.9063&quot; y2=&quot;291.9063&quot;/&gt;&lt;!--MD5=[8d334a7dde9cb883c9a16351f70702e3]
class ShoppingListRepository--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; height=&quot;48&quot; id=&quot;ShoppingListRepository&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;174&quot; x=&quot;348&quot; y=&quot;359.9063&quot;/&gt;&lt;ellipse cx=&quot;363&quot; cy=&quot;375.9063&quot; fill=&quot;#ADD1B2&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M365.4844,381.7813 Q364.9063,382.0938 364.2656,382.25 Q363.625,382.4063 362.9219,382.4063 Q360.4063,382.4063 359.0781,380.7344 Q357.7656,379.0625 357.7656,375.9063 Q357.7656,372.75 359.0781,371.0781 Q360.4063,369.4063 362.9219,369.4063 Q363.625,369.4063 364.2656,369.5625 Q364.9219,369.7188 365.4844,370.0313 L365.4844,372.8281 Q364.8438,372.25 364.25,371.9844 Q363.6563,371.7188 363.0313,371.7188 Q361.6875,371.7188 361,372.7813 Q360.3125,373.8281 360.3125,375.9063 Q360.3125,377.9844 361,379.0469 Q361.6875,380.0938 363.0313,380.0938 Q363.6563,380.0938 364.25,379.8281 Q364.8438,379.5625 365.4844,378.9844 L365.4844,381.7813 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;142&quot; x=&quot;377&quot; y=&quot;380.0551&quot;&gt;ShoppingListRepository&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;349&quot; x2=&quot;521&quot; y1=&quot;391.9063&quot; y2=&quot;391.9063&quot;/&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;349&quot; x2=&quot;521&quot; y1=&quot;399.9063&quot; y2=&quot;399.9063&quot;/&gt;&lt;!--MD5=[693cfc7d79c065c36803d58a3b06a5ef]
class InsertDummyItemsIntoDatabase--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f1tczms5tyn6fn)&quot; height=&quot;48&quot; id=&quot;InsertDummyItemsIntoDatabase&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;229&quot; x=&quot;62.5&quot; y=&quot;143.9063&quot;/&gt;&lt;ellipse cx=&quot;77.5&quot; cy=&quot;159.9063&quot; fill=&quot;#ADD1B2&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M79.9844,165.7813 Q79.4063,166.0938 78.7656,166.25 Q78.125,166.4063 77.4219,166.4063 Q74.9063,166.4063 73.5781,164.7344 Q72.2656,163.0625 72.2656,159.9063 Q72.2656,156.75 73.5781,155.0781 Q74.9063,153.4063 77.4219,153.4063 Q78.125,153.4063 78.7656,153.5625 Q79.4219,153.7188 79.9844,154.0313 L79.9844,156.8281 Q79.3438,156.25 78.75,155.9844 Q78.1563,155.7188 77.5313,155.7188 Q76.1875,155.7188 75.5,156.7813 Q74.8125,157.8281 74.8125,159.9063 Q74.8125,161.9844 75.5,163.0469 Q76.1875,164.0938 77.5313,164.0938 Q78.1563,164.0938 78.75,163.8281 Q79.3438,163.5625 79.9844,162.9844 L79.9844,165.7813 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;197&quot; x=&quot;91.5&quot; y=&quot;164.0551&quot;&gt;InsertDummyItemsIntoDatabase&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;63.5&quot; x2=&quot;290.5&quot; y1=&quot;175.9063&quot; y2=&quot;175.9063&quot;/&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;63.5&quot; x2=&quot;290.5&quot; y1=&quot;183.9063&quot; y2=&quot;183.9063&quot;/&gt;&lt;!--MD5=[850a2311c7f1675b969dd5456a5dc5db]
link ItemController to ItemService--&gt;&lt;path d=&quot;M640,191.9063 C640,207.9063 640,229.3563 640,246.4363 &quot; fill=&quot;none&quot; id=&quot;ItemController-&amp;gt;ItemService&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;polygon fill=&quot;#A80036&quot; points=&quot;640,251.5863,644,242.5863,640,246.5863,636,242.5863,640,251.5863&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;!--MD5=[7e4438329ece6063ad1b900a89a2875b]
link ItemService to ItemRepository--&gt;&lt;path d=&quot;M640,299.9063 C640,315.9063 640,337.3563 640,354.4363 &quot; fill=&quot;none&quot; id=&quot;ItemService-&amp;gt;ItemRepository&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;polygon fill=&quot;#A80036&quot; points=&quot;640,359.5863,644,350.5863,640,354.5863,636,350.5863,640,359.5863&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;!--MD5=[427350878f53956ead6178635e392fb4]
link ShoppingListController to ShoppingListService--&gt;&lt;path d=&quot;M435,191.9063 C435,207.9063 435,229.3563 435,246.4363 &quot; fill=&quot;none&quot; id=&quot;ShoppingListController-&amp;gt;ShoppingListService&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;polygon fill=&quot;#A80036&quot; points=&quot;435,251.5863,439,242.5863,435,246.5863,431,242.5863,435,251.5863&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;!--MD5=[3fc898fdfcce18706cfece53c129bb0a]
link ShoppingListService to ShoppingListRepository--&gt;&lt;path d=&quot;M435,299.9063 C435,315.9063 435,337.3563 435,354.4363 &quot; fill=&quot;none&quot; id=&quot;ShoppingListService-&amp;gt;ShoppingListRepository&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;polygon fill=&quot;#A80036&quot; points=&quot;435,359.5863,439,350.5863,435,354.5863,431,350.5863,435,359.5863&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;!--MD5=[13a030d7be4a6cd5022e6b7ccd8123af]
@startuml

title Sholia Project\nPackages and Collaborators

package tech.vladflore.sholia {
    package item {
        class ItemController
        class ItemService
        class ItemRepository
        ItemController - -&gt; ItemService
        ItemService - -&gt; ItemRepository
    }

    package shoppinglist {
        class ShoppingListController
        class ShoppingListService
        class ShoppingListRepository
        ShoppingListController - -&gt; ShoppingListService
        ShoppingListService - -&gt; ShoppingListRepository
    }

    package config {
        class InsertDummyItemsIntoDatabase
    }
}
@enduml

PlantUML version 1.2020.09(Sun May 10 12:51:06 CEST 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.8+10-b944.34
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--&gt;&lt;/g&gt;&lt;/svg&gt;

&lt;p&gt;I use &lt;code class=&quot;highlighter-rouge&quot;&gt;Enum&lt;/code&gt;s to group different related values under the same name, &lt;strong&gt;Data Transfer Objects&lt;/strong&gt; (DTOs) to move data between boundaries,
&lt;strong&gt;Mapstruct&lt;/strong&gt; to convert one object into another, &lt;strong&gt;Lombok&lt;/strong&gt; to get rid of that annoying boilerplate code, &lt;strong&gt;validation&lt;/strong&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.validation.*&lt;/code&gt; to insure
data validity, &lt;strong&gt;Jackson&lt;/strong&gt; to easily process JSON data. As I am using &lt;strong&gt;Spring Framework&lt;/strong&gt; and &lt;strong&gt;Spring Boot&lt;/strong&gt;, a huge part of the heavy lifting is done by the framework,
which includes dependency injection, database access and so on.&lt;/p&gt;

&lt;p&gt;The diagram below depicts a part of the model:&lt;/p&gt;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; contentScriptType=&quot;application/ecmascript&quot; contentStyleType=&quot;text/css&quot; height=&quot;529px&quot; preserveAspectRatio=&quot;none&quot; style=&quot;width:488px;height:529px;&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 488 529&quot; width=&quot;488px&quot; zoomAndPan=&quot;magnify&quot;&gt;&lt;defs&gt;&lt;filter height=&quot;300%&quot; id=&quot;f10hvnnh3vi7ct&quot; width=&quot;300%&quot; x=&quot;-1&quot; y=&quot;-1&quot;&gt;&lt;feGaussianBlur result=&quot;blurOut&quot; stdDeviation=&quot;2.0&quot;/&gt;&lt;feColorMatrix in=&quot;blurOut&quot; result=&quot;blurOut2&quot; type=&quot;matrix&quot; values=&quot;0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0&quot;/&gt;&lt;feOffset dx=&quot;4.0&quot; dy=&quot;4.0&quot; in=&quot;blurOut2&quot; result=&quot;blurOut3&quot;/&gt;&lt;feBlend in=&quot;SourceGraphic&quot; in2=&quot;blurOut3&quot; mode=&quot;normal&quot;/&gt;&lt;/filter&gt;&lt;/defs&gt;&lt;g&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;18&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;122&quot; x=&quot;187&quot; y=&quot;16.708&quot;&gt;Sholia Project&lt;/text&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;18&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;54&quot; x=&quot;221&quot; y=&quot;37.6611&quot;&gt;Model&lt;/text&gt;&lt;!--MD5=[44a1b4afaef76c16e6c9ec4990ad0c8d]
class Item--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f10hvnnh3vi7ct)&quot; height=&quot;163.2422&quot; id=&quot;Item&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;222&quot; x=&quot;144&quot; y=&quot;195.9063&quot;/&gt;&lt;ellipse cx=&quot;236.75&quot; cy=&quot;211.9063&quot; fill=&quot;#ADD1B2&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M239.2344,217.7813 Q238.6563,218.0938 238.0156,218.25 Q237.375,218.4063 236.6719,218.4063 Q234.1563,218.4063 232.8281,216.7344 Q231.5156,215.0625 231.5156,211.9063 Q231.5156,208.75 232.8281,207.0781 Q234.1563,205.4063 236.6719,205.4063 Q237.375,205.4063 238.0156,205.5625 Q238.6719,205.7188 239.2344,206.0313 L239.2344,208.8281 Q238.5938,208.25 238,207.9844 Q237.4063,207.7188 236.7813,207.7188 Q235.4375,207.7188 234.75,208.7813 Q234.0625,209.8281 234.0625,211.9063 Q234.0625,213.9844 234.75,215.0469 Q235.4375,216.0938 236.7813,216.0938 Q237.4063,216.0938 238,215.8281 Q238.5938,215.5625 239.2344,214.9844 L239.2344,217.7813 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;28&quot; x=&quot;257.25&quot; y=&quot;216.0551&quot;&gt;Item&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;145&quot; x2=&quot;365&quot; y1=&quot;227.9063&quot; y2=&quot;227.9063&quot;/&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;152&quot; y=&quot;235.9063&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;45&quot; x=&quot;164&quot; y=&quot;242.1167&quot;&gt;id: Long&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;152&quot; y=&quot;248.7109&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;73&quot; x=&quot;164&quot; y=&quot;254.9214&quot;&gt;name: String&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;152&quot; y=&quot;261.5156&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;93&quot; x=&quot;164&quot; y=&quot;267.7261&quot;&gt;quantity: Double&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;152&quot; y=&quot;274.3203&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;196&quot; x=&quot;164&quot; y=&quot;280.5308&quot;&gt;measurement: MeasurementEnum&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;152&quot; y=&quot;287.125&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;147&quot; x=&quot;164&quot; y=&quot;293.3354&quot;&gt;language: LanguageEnum&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;152&quot; y=&quot;299.9297&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;142&quot; x=&quot;164&quot; y=&quot;306.1401&quot;&gt;pricePerQuantity: Double&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;152&quot; y=&quot;312.7344&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;68&quot; x=&quot;164&quot; y=&quot;318.9448&quot;&gt;shop: String&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;152&quot; y=&quot;325.5391&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;72&quot; x=&quot;164&quot; y=&quot;331.7495&quot;&gt;notes: String&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;152&quot; y=&quot;338.3438&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;142&quot; x=&quot;164&quot; y=&quot;344.5542&quot;&gt;currency: CurrencyEnum&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;145&quot; x2=&quot;365&quot; y1=&quot;351.1484&quot; y2=&quot;351.1484&quot;/&gt;&lt;!--MD5=[9630763e33facf945baa437552379d6e]
class ShoppingList--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f10hvnnh3vi7ct)&quot; height=&quot;86.4141&quot; id=&quot;ShoppingList&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;127&quot; x=&quot;191.5&quot; y=&quot;49.9063&quot;/&gt;&lt;ellipse cx=&quot;213.7&quot; cy=&quot;65.9063&quot; fill=&quot;#ADD1B2&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M216.1844,71.7813 Q215.6063,72.0938 214.9656,72.25 Q214.325,72.4063 213.6219,72.4063 Q211.1063,72.4063 209.7781,70.7344 Q208.4656,69.0625 208.4656,65.9063 Q208.4656,62.75 209.7781,61.0781 Q211.1063,59.4063 213.6219,59.4063 Q214.325,59.4063 214.9656,59.5625 Q215.6219,59.7188 216.1844,60.0313 L216.1844,62.8281 Q215.5438,62.25 214.95,61.9844 Q214.3563,61.7188 213.7313,61.7188 Q212.3875,61.7188 211.7,62.7813 Q211.0125,63.8281 211.0125,65.9063 Q211.0125,67.9844 211.7,69.0469 Q212.3875,70.0938 213.7313,70.0938 Q214.3563,70.0938 214.95,69.8281 Q215.5438,69.5625 216.1844,68.9844 L216.1844,71.7813 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;79&quot; x=&quot;229.3&quot; y=&quot;70.0551&quot;&gt;ShoppingList&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;192.5&quot; x2=&quot;317.5&quot; y1=&quot;81.9063&quot; y2=&quot;81.9063&quot;/&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;199.5&quot; y=&quot;89.9063&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;45&quot; x=&quot;211.5&quot; y=&quot;96.1167&quot;&gt;id: Long&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;199.5&quot; y=&quot;102.7109&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;73&quot; x=&quot;211.5&quot; y=&quot;108.9214&quot;&gt;name: String&lt;/text&gt;&lt;rect fill=&quot;none&quot; height=&quot;6&quot; style=&quot;stroke: #C82930; stroke-width: 1.0;&quot; width=&quot;6&quot; x=&quot;199.5&quot; y=&quot;115.5156&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;101&quot; x=&quot;211.5&quot; y=&quot;121.7261&quot;&gt;items: List&amp;lt;Item&amp;gt;&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;192.5&quot; x2=&quot;317.5&quot; y1=&quot;128.3203&quot; y2=&quot;128.3203&quot;/&gt;&lt;!--MD5=[f942659406c6b8d57ba4bbf962e741bb]
class MeasurementEnum--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f10hvnnh3vi7ct)&quot; height=&quot;99.2188&quot; id=&quot;MeasurementEnum&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;150&quot; x=&quot;6&quot; y=&quot;418.9063&quot;/&gt;&lt;ellipse cx=&quot;21&quot; cy=&quot;434.9063&quot; fill=&quot;#EB937F&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M25.125,441.4063 L17.3906,441.4063 L17.3906,428.4063 L25.125,428.4063 L25.125,430.6719 L19.8438,430.6719 L19.8438,433.4063 L24.625,433.4063 L24.625,435.6719 L19.8438,435.6719 L19.8438,439.1406 L25.125,439.1406 L25.125,441.4063 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;118&quot; x=&quot;35&quot; y=&quot;439.0551&quot;&gt;MeasurementEnum&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;7&quot; x2=&quot;155&quot; y1=&quot;450.9063&quot; y2=&quot;450.9063&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;9&quot; x=&quot;12&quot; y=&quot;465.1167&quot;&gt;G&lt;/text&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;16&quot; x=&quot;12&quot; y=&quot;477.9214&quot;&gt;KG&lt;/text&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;6&quot; x=&quot;12&quot; y=&quot;490.7261&quot;&gt;L&lt;/text&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;15&quot; x=&quot;12&quot; y=&quot;503.5308&quot;&gt;PC&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;7&quot; x2=&quot;155&quot; y1=&quot;510.125&quot; y2=&quot;510.125&quot;/&gt;&lt;!--MD5=[e2bf785f0e495272737a5e0f47020f68]
class LanguageEnum--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f10hvnnh3vi7ct)&quot; height=&quot;86.4141&quot; id=&quot;LanguageEnum&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;128&quot; x=&quot;191&quot; y=&quot;425.4063&quot;/&gt;&lt;ellipse cx=&quot;206&quot; cy=&quot;441.4063&quot; fill=&quot;#EB937F&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M210.125,447.9063 L202.3906,447.9063 L202.3906,434.9063 L210.125,434.9063 L210.125,437.1719 L204.8438,437.1719 L204.8438,439.9063 L209.625,439.9063 L209.625,442.1719 L204.8438,442.1719 L204.8438,445.6406 L210.125,445.6406 L210.125,447.9063 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;96&quot; x=&quot;220&quot; y=&quot;445.5551&quot;&gt;LanguageEnum&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;192&quot; x2=&quot;318&quot; y1=&quot;457.4063&quot; y2=&quot;457.4063&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;15&quot; x=&quot;197&quot; y=&quot;471.6167&quot;&gt;EN&lt;/text&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;15&quot; x=&quot;197&quot; y=&quot;484.4214&quot;&gt;DE&lt;/text&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;17&quot; x=&quot;197&quot; y=&quot;497.2261&quot;&gt;RO&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;192&quot; x2=&quot;318&quot; y1=&quot;503.8203&quot; y2=&quot;503.8203&quot;/&gt;&lt;!--MD5=[4260f3b4452d5e63cf2fdc2625c787c5]
class CurrencyEnum--&gt;&lt;rect fill=&quot;#FEFECE&quot; filter=&quot;url(#f10hvnnh3vi7ct)&quot; height=&quot;86.4141&quot; id=&quot;CurrencyEnum&quot; style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; width=&quot;123&quot; x=&quot;354.5&quot; y=&quot;425.4063&quot;/&gt;&lt;ellipse cx=&quot;369.5&quot; cy=&quot;441.4063&quot; fill=&quot;#EB937F&quot; rx=&quot;11&quot; ry=&quot;11&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;path d=&quot;M373.625,447.9063 L365.8906,447.9063 L365.8906,434.9063 L373.625,434.9063 L373.625,437.1719 L368.3438,437.1719 L368.3438,439.9063 L373.125,439.9063 L373.125,442.1719 L368.3438,442.1719 L368.3438,445.6406 L373.625,445.6406 L373.625,447.9063 Z &quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;12&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;91&quot; x=&quot;383.5&quot; y=&quot;445.5551&quot;&gt;CurrencyEnum&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;355.5&quot; x2=&quot;476.5&quot; y1=&quot;457.4063&quot; y2=&quot;457.4063&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;32&quot; x=&quot;360.5&quot; y=&quot;471.6167&quot;&gt;EURO&lt;/text&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;45&quot; x=&quot;360.5&quot; y=&quot;484.4214&quot;&gt;DOLLAR&lt;/text&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;11&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;25&quot; x=&quot;360.5&quot; y=&quot;497.2261&quot;&gt;RON&lt;/text&gt;&lt;line style=&quot;stroke: #A80036; stroke-width: 1.5;&quot; x1=&quot;355.5&quot; x2=&quot;476.5&quot; y1=&quot;503.8203&quot; y2=&quot;503.8203&quot;/&gt;&lt;!--MD5=[de11bd4cd5b546b62505f01129df9179]
link Item to MeasurementEnum--&gt;&lt;path d=&quot;M180.7,359.1063 C163.36,377.9462 145.32,397.5363 129.44,414.7963 &quot; fill=&quot;none&quot; id=&quot;Item-&amp;gt;MeasurementEnum&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;polygon fill=&quot;#A80036&quot; points=&quot;125.87,418.6663,134.9043,414.7443,129.2525,414.984,129.0127,409.3323,125.87,418.6663&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;!--MD5=[ba8fece8fddd616f651b1a0ad65073e5]
link Item to LanguageEnum--&gt;&lt;path d=&quot;M255,359.1063 C255,379.9263 255,401.6563 255,420.1463 &quot; fill=&quot;none&quot; id=&quot;Item-&amp;gt;LanguageEnum&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;polygon fill=&quot;#A80036&quot; points=&quot;255,425.2663,259,416.2663,255,420.2663,251,416.2663,255,425.2663&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;!--MD5=[8551264c79207d5b46a27acac92827d1]
link Item to CurrencyEnum--&gt;&lt;path d=&quot;M323.75,359.1063 C341.78,380.2863 360.62,402.3963 376.54,421.0863 &quot; fill=&quot;none&quot; id=&quot;Item-&amp;gt;CurrencyEnum&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;polygon fill=&quot;#A80036&quot; points=&quot;380.1,425.2663,377.3004,415.8237,376.8543,421.4629,371.2151,421.0168,380.1,425.2663&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;!--MD5=[88c7db923e7395e977ba13b2406b03f5]
reverse link ShoppingList to Item--&gt;&lt;path d=&quot;M255,149.6363 C255,164.1363 255,180.0562 255,195.5663 &quot; fill=&quot;none&quot; id=&quot;ShoppingList&amp;lt;-Item&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;polygon fill=&quot;#FFFFFF&quot; points=&quot;255,136.2362,251,142.2362,255,148.2362,259,142.2362,255,136.2362&quot; style=&quot;stroke: #A80036; stroke-width: 1.0;&quot;/&gt;&lt;text fill=&quot;#000000&quot; font-family=&quot;sans-serif&quot; font-size=&quot;13&quot; lengthAdjust=&quot;spacingAndGlyphs&quot; textLength=&quot;23&quot; x=&quot;231.0117&quot; y=&quot;184.9508&quot;&gt;0..*&lt;/text&gt;&lt;!--MD5=[b5948f61642587b77b03861f8672a1b3]
@startuml

title Sholia Project\nModel

class Item {
- id: Long
- name: String
- quantity: Double
- measurement: MeasurementEnum
- language: LanguageEnum
- pricePerQuantity: Double
- shop: String
- notes: String
- currency: CurrencyEnum
}

class ShoppingList{
- id: Long
- name: String
- items: List&lt;Item&gt;
}

enum MeasurementEnum {
G
KG
L
PC
}

enum LanguageEnum{
EN
DE
RO
}

enum CurrencyEnum{
EURO
DOLLAR
RON
}

Item - -&gt; MeasurementEnum
Item - -&gt; LanguageEnum
Item - -&gt; CurrencyEnum

ShoppingList o- - &quot;0..*&quot; Item

@enduml

PlantUML version 1.2020.09(Sun May 10 12:51:06 CEST 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.8+10-b944.34
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--&gt;&lt;/g&gt;&lt;/svg&gt;

&lt;p&gt;You will be seeing more of this kind of diagrams as the project advances (I created them using &lt;a href=&quot;https://plantuml.com/&quot;&gt;PlantUML&lt;/a&gt; and a &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7017-plantuml-integration&quot;&gt;plugin&lt;/a&gt; for IntelliJ and exporting them as .svg).
Think of them as &lt;em&gt;diagram as code&lt;/em&gt;, which means, one writes some special code, which is then transformed into a .svg or image of even .pdf, code which can be versioned.&lt;/p&gt;

&lt;p&gt;Another interesting thing was how to take a peek inside the embedded H2 database from the terminal.
Please note that the database has to be shut down in order to connect to it, we are basically having a look into the database file, which is locked as long as H2 is running.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java &lt;span class=&quot;nt&quot;&gt;-cp&lt;/span&gt; &amp;lt;path-to-h2-jar&amp;gt; org.h2.tools.Shell &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;h2-connection-string&amp;gt;;ifexists=true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-user&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;user&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-password&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;password&amp;gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;path-to-h2-jar&amp;gt;&lt;/code&gt; is something like &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/vlad/.m2/repository/com/h2database/h2/1.4.200/h2-1.4.200.jar&lt;/code&gt;, in my case I am using maven&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h2-connection-string&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;user&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;password&amp;gt;&lt;/code&gt; is the information to connect to the H2 database, usually found in the &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After connecting to the database we can query it by running commands like:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;final-words&quot;&gt;Final words&lt;/h3&gt;

&lt;p&gt;This post is more of a status report, and a bird’s-eye view of the current project iteration. We are now at the point where we could start building a fancier kind of client, 
other than some .sh scripts, and send requests to the backend to create and get items and shopping lists. As necessary, the business logic will change to make room to other
features as I discover them from my own shopping experience. There is still a lot of work ahead - new client, a more stable backend, CI/CD process, Infrastructure etc., so stay tuned
for the next update.&lt;/p&gt;

&lt;p&gt;The current state of the project is available on &lt;a href=&quot;https://github.com/vladflore/shopping-list-app/tree/master/backend/src/main/java/tech/vladflore/sholia&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take care and ‘til next time!&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">This is part 3 of the Pet Project series about building a small web application from scratch.</summary></entry><entry><title type="html">Java 11</title><link href="https://vladflore.github.io/java-11" rel="alternate" type="text/html" title="Java 11" /><published>2020-09-22T00:00:00+02:00</published><updated>2020-09-22T00:00:00+02:00</updated><id>https://vladflore.github.io/java11</id><content type="html" xml:base="https://vladflore.github.io/java-11">&lt;p&gt;But &lt;a href=&quot;https://www.oracle.com/java/technologies/javase-downloads.html&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt; is already at version 15, why talk about 11 ?! Well,…but before that, a note of caution:
considering the release cycle of Java nowadays, it might be that the current version of Java at the time you are reading this 
is bigger than 15, it was 15 when I wrote this post!&lt;/p&gt;

&lt;p&gt;Now, let’s continue…&lt;/p&gt;

&lt;p&gt;Java 11 is the current (see note of caution above) LTS version, and will stay like that until Java 17 appears, which should be
somewhere around the end of 2021, which is then the new LTS version (all of this hold true iff Oracle doesn’t change something in the whole release plan).&lt;/p&gt;

&lt;p&gt;Oracle’s latest &lt;a href=&quot;https://education.oracle.com/java-se-11-developer/pexam_1Z0-819&quot; target=&quot;_blank&quot;&gt;certification&lt;/a&gt; related to Java is for version 11, again, if they do not change anything, by the time you are reading this.&lt;/p&gt;

&lt;p&gt;Besides, Java 11 has lots of new cool features, some of which I will be addressing in this post. Please note, that some features reached maturity with &lt;em&gt;this&lt;/em&gt; version and were included as stable enhancements in the language.&lt;/p&gt;

&lt;p&gt;For a complete, detailed and kinda scary compilation of all the changes check &lt;a href=&quot;https://cr.openjdk.java.net/~iris/se/11/latestSpec/apidiffs/overview-summary.html&quot; target=&quot;_blank&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post I’ll be giving a short intro with examples about &lt;a href=&quot;https://openjdk.java.net/jeps/330&quot; target=&quot;_blank&quot;&gt;JEP 330&lt;/a&gt; and &lt;em&gt;shebang&lt;/em&gt; files.&lt;/p&gt;

&lt;h4 id=&quot;environment-configuration&quot;&gt;Environment configuration&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OS: Ubuntu 20.04.1 LTS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
openjdk 11.0.8 2020-07-14
OpenJDK Runtime Environment AdoptOpenJDK &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 11.0.8+10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
OpenJDK 64-Bit Server VM AdoptOpenJDK &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 11.0.8+10, mixed mode&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I use &lt;a href=&quot;https://sdkman.io/&quot;&gt;sdkman&lt;/a&gt; to manage the versions of Java I use on my system and as such I have this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;whereis java
java: /etc/java /usr/share/java /home/vlad/.sdkman/candidates/java/11.0.8.hs-adpt/bin/java
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which java
/home/vlad/.sdkman/candidates/java/current/bin/java
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ll /home/vlad/.sdkman/candidates/java/
...
drwxr-xr-x 5 vlad vlad 4096 Sep 21 23:22 ./
drwxr-xr-x 5 vlad vlad 4096 Jun 30 17:24 ../
drwxr-xr-x 9 vlad vlad 4096 Jul 15 11:08 11.0.8.hs-adpt/
drwxr-xr-x 9 vlad vlad 4096 Jul 15 11:13 14.0.2.hs-adpt/
drwxr-xr-x 8 vlad vlad 4096 Jul 28 17:21 8.0.265.hs-adpt/
lrwxrwxrwx 1 vlad vlad   14 Sep 21 23:21 current -&amp;gt; 11.0.8.hs-adpt/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, on to some cool feature of Java 11…&lt;/p&gt;

&lt;h3 id=&quot;launch-single-file-source-code-programs&quot;&gt;Launch single-file source-code programs&lt;/h3&gt;

&lt;p&gt;As per &lt;a href=&quot;https://openjdk.java.net/jeps/330&quot; target=&quot;_blank&quot;&gt;JEP 330&lt;/a&gt; we now have the possibility to launch single-file source-code programs.&lt;/p&gt;

&lt;p&gt;Let’s code the simplest, politest Java program:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Normally we would need to compile it with &lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt; and get that &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; file and then run it with &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; to see the greeting,
but now we can just do:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java Greeter.java Vlad
Hello Vlad!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s turn this into a &lt;em&gt;shebang file&lt;/em&gt; and use it like a script, a Java Script…mind the gap ;)&lt;/p&gt;

&lt;p&gt;The main idea is to add a line (contains the path to the java binary) similar to this &lt;code class=&quot;highlighter-rouge&quot;&gt;#!/home/vlad/.sdkman/candidates/java/11.0.8.hs-adpt/bin/java --source 11&lt;/code&gt; 
at the beginning of a file and then the Java code after it, make the new file executable and execute it like any other sh file. 
By the way, we can choose any name we want for the script file.&lt;/p&gt;

&lt;p&gt;Content of &lt;code class=&quot;highlighter-rouge&quot;&gt;greet&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vlad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sdkman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;make it executable:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;u+x greet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and execute it:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./greet Vlad
Hello Vlad!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s spice things up a bit and implement another more complex example: this time we want to take some text, line by line, 
and display only the lines that match a given regular expression (basically a simplified version of &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; command).&lt;/p&gt;

&lt;p&gt;Content of &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vlad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sdkman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.regex.Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.stream.Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Grep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// some arguments validation&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;showUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// some more arguments validation and extraction of the actual arguments&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;showUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;strPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;strPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;showUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// is it a case-insensitive search&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isCaseSensitive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-i&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;isCaseSensitive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCaseSensitive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(?i)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// new Java 11 feature&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// see https://cr.openjdk.java.net/~iris/se/11/latestSpec/apidiffs/java/util/regex/Pattern.html&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asMatchPredicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asMatchPredicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asMatchPredicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Usage: ./grep [-i] PATTERN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Make the file executable and then you can execute it like this:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aaa&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bbb&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ccc&quot;&lt;/span&gt; | ./grep &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; CCC
ccc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aaa&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bbb&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ccc&quot;&lt;/span&gt; | ./grep &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; C&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
ccc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aaa&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bbb&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ccc&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; content
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;content | ./grep &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; CCC
ccc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There you have it, scripting in Java has never been easier.&lt;/p&gt;

&lt;p&gt;The examples are available &lt;a href=&quot;https://github.com/vladflore/java11&quot; target=&quot;_blank&quot;&gt;in this GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding in Java 11!&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">But Java is already at version 15, why talk about 11 ?! Well,…but before that, a note of caution: considering the release cycle of Java nowadays, it might be that the current version of Java at the time you are reading this is bigger than 15, it was 15 when I wrote this post!</summary></entry><entry><title type="html">Pet Project (2/)</title><link href="https://vladflore.github.io/pet-project-part2" rel="alternate" type="text/html" title="Pet Project (2/)" /><published>2020-07-14T00:00:00+02:00</published><updated>2020-07-14T00:00:00+02:00</updated><id>https://vladflore.github.io/pet-project-part2</id><content type="html" xml:base="https://vladflore.github.io/pet-project-part2">&lt;p&gt;This is &lt;strong&gt;part 2&lt;/strong&gt; of the &lt;strong&gt;Pet Project series&lt;/strong&gt; about building a small web application from scratch.&lt;/p&gt;

&lt;p&gt;Project posts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/pet-project-part1&quot;&gt;part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/pet-project-part3&quot;&gt;part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As stated in the final words section of the &lt;a href=&quot;/pet-project-part1&quot;&gt;part 1&lt;/a&gt; post, there are still some technical points I want to address, before starting with
the actual implementation: hooking up the project to a &lt;em&gt;SonarQube&lt;/em&gt; Server and define a set of &lt;em&gt;quality constraints&lt;/em&gt; for it.&lt;/p&gt;

&lt;p&gt;Let’s start with hooking up the backend component to the SonarQube. I will be using the SonarQube instance I installed and configured 
in a previous post. The post &lt;a href=&quot;/sonarqube&quot;&gt;SonarQube on EC2&lt;/a&gt; explains the steps required to get yourself a running instance of SonarQube. In case 
you do not want to deal with AWS, you can as easily install SonarQube locally on your own working machine, be it physical or virtual.&lt;/p&gt;

&lt;p&gt;Having the infrastructure up and running let us now update the backend component with respect to the quality constraints, and 
by this I mean enabling code coverage, &lt;a href=&quot;https://en.wikipedia.org/wiki/Mutation_testing&quot;&gt;mutation testing&lt;/a&gt;, setting some code coverage metric constraints and 
making the reports available in SonarQube.&lt;/p&gt;

&lt;h3 id=&quot;enabling-code-coverage&quot;&gt;Enabling code coverage&lt;/h3&gt;
&lt;p&gt;For this I will be using &lt;a href=&quot;https://www.eclemma.org/jacoco/trunk/doc/maven.html&quot;&gt;Maven JaCoCo Plug-in&lt;/a&gt;. Add &lt;code class=&quot;highlighter-rouge&quot;&gt;jacoco-maven-plugin&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;build&amp;gt;&amp;lt;plugins&amp;gt;...&amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;&lt;/code&gt; 
section of your &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; file, as illustrated below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.jacoco&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jacoco-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.8.5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;prepare-agent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;report&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;prepare-package&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;report&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now do a &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean verify&lt;/code&gt; and observe that unter &lt;code class=&quot;highlighter-rouge&quot;&gt;/target&lt;/code&gt; we now have a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;jacoco.exec&lt;/code&gt; and another folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/site/jacoco&lt;/code&gt;.
The file can be interpreted by other applications, like Sonar, IntelliJ, or by plugins.
The folder contains the code coverage report in multiple formats - HTML, XML and CSV.&lt;/p&gt;

&lt;h3 id=&quot;adding-code-coverage-metrics-constraints&quot;&gt;Adding code coverage metrics constraints&lt;/h3&gt;
&lt;p&gt;Adding constraints for some code coverage metrics requires configuring the jacoco plugin as below (put the block inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;plugin&amp;gt;&amp;lt;/plugin&amp;gt;&lt;/code&gt; tags):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;rules&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rule&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;element&amp;gt;&lt;/span&gt;BUNDLE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;limit&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;counter&amp;gt;&lt;/span&gt;INSTRUCTION&lt;span class=&quot;nt&quot;&gt;&amp;lt;/counter&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;COVEREDRATIO&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;minimum&amp;gt;&lt;/span&gt;0.90&lt;span class=&quot;nt&quot;&gt;&amp;lt;/minimum&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/limit&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;limit&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;counter&amp;gt;&lt;/span&gt;CLASS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/counter&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;MISSEDCOUNT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;maximum&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maximum&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/limit&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/limits&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rule&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;element&amp;gt;&lt;/span&gt;CLASS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;excludes&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclude&amp;gt;&lt;/span&gt;*Test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclude&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/excludes&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;limit&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;counter&amp;gt;&lt;/span&gt;LINE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/counter&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;COVEREDRATIO&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;minimum&amp;gt;&lt;/span&gt;90%&lt;span class=&quot;nt&quot;&gt;&amp;lt;/minimum&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/limit&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/limits&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case I say that I want a minimum instruction coverage ratio of 90% for the whole application, our backend, no classes should be omitted, and at the class level 
I want a minimum line coverage ratio of 90%, but not for the test classes.&lt;/p&gt;

&lt;p&gt;Failing to meet these conditions will result in a build fail.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;https://www.eclemma.org/jacoco/trunk/doc/check-mojo.html#rules&quot;&gt;code coverage metrics&lt;/a&gt; documentation page for more details.&lt;/p&gt;

&lt;h3 id=&quot;adding-mutation-testing&quot;&gt;Adding mutation testing&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://pitest.org/&quot;&gt;Pitest&lt;/a&gt; system provides mutation testing in the Java world and can be added to a Maven project by including the &lt;a href=&quot;https://pitest.org/quickstart/maven/&quot;&gt;pitest maven plugin&lt;/a&gt; and configure it accordingly.&lt;/p&gt;

&lt;p&gt;At a minimum we need to add the following to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/code&gt; block:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.pitest&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;pitest-maven&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;outputFormats&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!--
            XML for sonar and HTML to keep it as default
            which would have been ignored if we had added only the XML
            --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;outputFormat&amp;gt;&lt;/span&gt;XML&lt;span class=&quot;nt&quot;&gt;&amp;lt;/outputFormat&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;outputFormat&amp;gt;&lt;/span&gt;HTML&lt;span class=&quot;nt&quot;&gt;&amp;lt;/outputFormat&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/outputFormats&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;mutationCoverage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.pitest&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;pitest-junit5-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.12&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will bind the goal &lt;code class=&quot;highlighter-rouge&quot;&gt;org.pitest:pitest-maven:mutationCoverage&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; phase, 
which means it will run whenever the test phase runs, such as by &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean verify&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE 1:&lt;/em&gt;&lt;/strong&gt; bear in mind that mutation testing can slow your unit tests, so you might want to separate them from the other tests.
Without further configuring the plugin &lt;em&gt;&lt;strong&gt;all&lt;/strong&gt;&lt;/em&gt; your tests will be mutated, which could lead to longer than expected test execution time.
Something similar should be done for the integration tests too. I will address all of this in the following posts, as the project progresses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE 2:&lt;/em&gt;&lt;/strong&gt; I had to add some dummy logic to the project to avoid pitest from failing when it does not find any code to mutate, other than the code 
scaffolding done by Spring Boot CLI when generating a new Spring Boot project. Check &lt;a href=&quot;https://github.com/hcoles/pitest/issues/781&quot;&gt;this link&lt;/a&gt; for more on this matter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before continuing with the next point, make sure your &lt;em&gt;SonarQube instance is running and configured correctly&lt;/em&gt; regarding mutation testing. 
Check &lt;em&gt;Configure SonarQube&lt;/em&gt; section of &lt;a href=&quot;/sonarqube&quot;&gt;this post&lt;/a&gt; for some guidance.&lt;/p&gt;

&lt;h3 id=&quot;push-the-code-analysis-to-sonarqube&quot;&gt;Push the code analysis to SonarQube&lt;/h3&gt;

&lt;p&gt;We first have to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;sonar-maven-plugin&lt;/code&gt; to the pom file, as illustrated below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.sonarsource.scanner.maven&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;sonar-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.7.0.1746&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Run the following command (change the Sonar host URL accordingly):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean verify sonar:sonar -Dsonar.host.url=http://&amp;lt;IP-Address&amp;gt;:9000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should be it! Check the &lt;a href=&quot;https://github.com/vladflore/shopping-list-app&quot;&gt;state of the project&lt;/a&gt; 
containing the changes mentioned above and have a look at the screen below to see how the project looks on SonarQube.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/sonar-pet-project.png&quot; alt=&quot;sonar-mt-plugin&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;final-words&quot;&gt;Final words&lt;/h3&gt;

&lt;p&gt;In this post we hooked up our backend project to SonarQube (I am using an instance on AWS EC2), enabled code coverage, 
added some code coverage constraints and mutation testing. This is more of a minimalistic configuration, feel free to explore more and 
make changes as you see fit for your project.&lt;/p&gt;

&lt;p&gt;Next, we will finally start writing some code to implement the first iteration of the project, as stated in &lt;a href=&quot;/pet-project-part1&quot;&gt;part 1&lt;/a&gt; of this series.&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">This is part 2 of the Pet Project series about building a small web application from scratch.</summary></entry><entry><title type="html">Pet Project (1/)</title><link href="https://vladflore.github.io/pet-project-part1" rel="alternate" type="text/html" title="Pet Project (1/)" /><published>2020-07-06T00:00:00+02:00</published><updated>2020-07-06T00:00:00+02:00</updated><id>https://vladflore.github.io/pet-project-part1</id><content type="html" xml:base="https://vladflore.github.io/pet-project-part1">&lt;h2 id=&quot;whats-all-about&quot;&gt;What’s all about?&lt;/h2&gt;

&lt;p&gt;This is &lt;strong&gt;part 1&lt;/strong&gt; of the &lt;strong&gt;Pet Project series&lt;/strong&gt; about building a small web application from scratch.&lt;/p&gt;

&lt;p&gt;You may already ask yourself, why building a web application? Well, what is the best way of &lt;em&gt;learning something new&lt;/em&gt; or &lt;em&gt;sharpening/acquiring some skills&lt;/em&gt;?
You are right, &lt;em&gt;&lt;strong&gt;practice&lt;/strong&gt;&lt;/em&gt; is the best way of achieving that.&lt;/p&gt;

&lt;p&gt;Project posts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/pet-project-part2&quot;&gt;part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/pet-project-part3&quot;&gt;part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-motivation-behind&quot;&gt;The motivation behind&lt;/h2&gt;

&lt;p&gt;There are hundreds of applications you could choose from to practise your programming skills, to learn a new language or framework, to generally challenge yourself by having to make something from scratch all by yourself. 
The &lt;em&gt;feeling good&lt;/em&gt; effect when you have finished your project will increase tenfold when your application will provide you with some real-life help. 
This is another reason I decided to go for it and try to build a… shopping list web application.&lt;/p&gt;

&lt;h2 id=&quot;outline-of-the-shopping-list-application&quot;&gt;Outline of the shopping list application&lt;/h2&gt;

&lt;h3 id=&quot;business-outline&quot;&gt;Business outline&lt;/h3&gt;

&lt;p&gt;As mentioned I will build a shopping list web application, which over the time will, hopefully, reach its purpose, which is to ease my shopping experience 
and help me get rid of that never-ending Google Drive document ;)&lt;/p&gt;

&lt;p&gt;As this is a one-man-show I will be the one to play the roles of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Project Manager&lt;/li&gt;
  &lt;li&gt;Product Owner&lt;/li&gt;
  &lt;li&gt;Architect&lt;/li&gt;
  &lt;li&gt;Technical Lead&lt;/li&gt;
  &lt;li&gt;Software Developer&lt;/li&gt;
  &lt;li&gt;Software Tester&lt;/li&gt;
  &lt;li&gt;DevOps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;&lt;strong&gt;first iteration&lt;/strong&gt;&lt;/em&gt; should bring the app to the point where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;multiple shopping lists can be created&lt;/li&gt;
  &lt;li&gt;items can be added to the respective shopping lists&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;technical-outline&quot;&gt;Technical outline&lt;/h3&gt;

&lt;p&gt;I will split the app into three main areas, namely &lt;strong&gt;backend&lt;/strong&gt;, &lt;strong&gt;frontend&lt;/strong&gt; and &lt;strong&gt;devops&lt;/strong&gt;. 
Each of them will include different technologies, language, frameworks, tools etc. as necessary.&lt;/p&gt;

&lt;p&gt;Note on the versions: I will normally go for the latest and greatest, but this might change as necessary.&lt;/p&gt;

&lt;h4 id=&quot;backend&quot;&gt;Backend&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Framework&lt;/li&gt;
  &lt;li&gt;Spring Boot&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;frontend&quot;&gt;Frontend&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Angular&lt;/li&gt;
  &lt;li&gt;JavaScript&lt;/li&gt;
  &lt;li&gt;HTML&lt;/li&gt;
  &lt;li&gt;CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;devops&quot;&gt;DevOps&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;GitHub&lt;/li&gt;
  &lt;li&gt;GitHub Actions / Jenkins&lt;/li&gt;
  &lt;li&gt;AWS&lt;/li&gt;
  &lt;li&gt;Ansible&lt;/li&gt;
  &lt;li&gt;SonarQube&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, I will enumerate the tools I will be using too (install the ones you are missing and pull up their documentation):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Git (Version Control System)&lt;/li&gt;
  &lt;li&gt;IntelliJ - Community or Ultimate (Integrated Development Environment) / Visual Studio Code&lt;/li&gt;
  &lt;li&gt;Bash / &lt;a href=&quot;https://fishshell.com/&quot;&gt;Fish&lt;/a&gt; (Shells)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tmux&quot;&gt;tmux&lt;/a&gt; (Terminal Multiplexer)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-cli.html&quot;&gt;Spring Boot CLI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.github.com/&quot;&gt;hub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will update this list as necessary.&lt;/p&gt;

&lt;p&gt;At a minimum, you should have: an IDE, Git, Bash, Spring Boot CLI and hub.&lt;/p&gt;

&lt;h2 id=&quot;initial-preparation&quot;&gt;Initial preparation&lt;/h2&gt;
&lt;p&gt;Let’s first set up the project skeleton considering the above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# find a suitable location for the new project and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# create the directory for it&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;shopping-list &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;shopping-list

&lt;span class=&quot;c&quot;&gt;# initialize a Spring Boot project - we'll be using the Spring Boot CLI&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this will create a folder named backend containing the Spring Boot Maven project&lt;/span&gt;
spring init &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; shopping-list-backend &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; com.example &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;web,h2,data-jpa &lt;span class=&quot;nt&quot;&gt;--description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shopping list backend powered by spring boot&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; shopping-list-backend backend&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now it is time to initialize the GH repository, we’ll be doing this from the command line too (here comes &lt;em&gt;hub&lt;/em&gt; into play).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&amp;lt;your-project-location&amp;gt;/shopping-list
&lt;span class=&quot;c&quot;&gt;# initialize a git repository and commit the current state of the project&lt;/span&gt;
git init
git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;initial commit&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# use hub to create a private GH repository named shopping-list-app&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this command will also open the GH web page of the repository in question&lt;/span&gt;
hub create &lt;span class=&quot;nt&quot;&gt;-po&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shopping list app&quot;&lt;/span&gt; shopping-list-app

&lt;span class=&quot;c&quot;&gt;# push the project to GitHub&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If everything went fine, we should have now a new project folder, &lt;code class=&quot;highlighter-rouge&quot;&gt;shopping-list&lt;/code&gt;, containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;backend&lt;/code&gt; component in which resides a Spring Boot project. The content of the application project is versioned and pushed to a GitHub repository called &lt;code class=&quot;highlighter-rouge&quot;&gt;shopping-list-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To ascertain that the backend component is so far free of problems we can do a &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean verify&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;backend&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The GitHub repository for this project can be found at this &lt;a href=&quot;https://github.com/vladflore/shopping-list-app&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;/h2&gt;
&lt;p&gt;Having done all the above gives us the grounds on which to further build our application.
There are still some technical points to be addressed, before actually starting with the implementation, like hooking the project up to a SonarQube Server and defining a set of quality constraints.&lt;/p&gt;

&lt;p&gt;All of these will be addressed in a new post, so stay tuned!&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">What’s all about?</summary></entry><entry><title type="html">Code Kata</title><link href="https://vladflore.github.io/code-kata" rel="alternate" type="text/html" title="Code Kata" /><published>2020-06-28T00:00:00+02:00</published><updated>2020-06-28T00:00:00+02:00</updated><id>https://vladflore.github.io/code-katas</id><content type="html" xml:base="https://vladflore.github.io/code-kata">&lt;p&gt;Lately I’ve been taking a keen interest in the idea of &lt;em&gt;writing code and getting better at it&lt;/em&gt;, and what I mean by this is not just 
the fact of &lt;em&gt;writing code&lt;/em&gt; itself and &lt;em&gt;making it work&lt;/em&gt;, but also improving your &lt;em&gt;coding skills&lt;/em&gt;, and &lt;em&gt;the way you code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When we write code we tend to concentrate on the code itself, on solving the problem, not necessarily on the way we produce that code, 
let alone how we navigate it…one can always use the mouse right? If you are working professionally in a project you don’t always have the time to &lt;em&gt;think&lt;/em&gt; about
the way you write code. Writing it, making it work and getting it accepted (only &lt;strong&gt;clean code&lt;/strong&gt; should have the privilege of reaching the main development line) is enough of a challenge.&lt;/p&gt;

&lt;p&gt;So, what then? Well, you could have a pet project, which could give you the time to &lt;em&gt;take a step back&lt;/em&gt;, &lt;em&gt;reflect&lt;/em&gt;, &lt;em&gt;think&lt;/em&gt; about &lt;em&gt;how&lt;/em&gt; you are producing code.
This could indeed work, the challenge is to have an idea to get you started and keep you motivated to continue. It is for sure a way to improve your craft, but we could do
even better than that. &lt;strong&gt;Code Kata&lt;/strong&gt;s for the win!&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Kata&quot;&gt;Kata&lt;/a&gt; is, according to Wikipedia&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;a detailed choreographed pattern of martial arts movements made to be practised alone, and within groups and in unison when training”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;a href=&quot;http://codekata.com&quot;&gt;Code Kata&lt;/a&gt; tries to bring the element of practice to the software development. It’s when/where you practice the skill you want to acquire 
or improve.&lt;/p&gt;

&lt;p&gt;If you want to take a deeper dive into this, check &lt;a href=&quot;https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X&quot;&gt;this book by Emily Bache&lt;/a&gt;, where you can find more on code katas, the notion of coding dojo und much more.
Do not forget to check the &lt;a href=&quot;https://github.com/emilybache&quot;&gt;GH repository&lt;/a&gt;, for some refactoring katas, that you could do - multiple programming languages supported.&lt;/p&gt;

&lt;p&gt;You want to practice on your own or in a group, &lt;a href=&quot;https://cyber-dojo.org/&quot;&gt;check this site&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The idea is that by doing katas you get to hon your coding skills, and pretty much everything else related to this that you want to improve, navigating and 
editing a text file, getting better and faster at writing code, writing more professional (clean-)code, learning an IDE, or some other text editing tool, like vim.
The possibilities are unlimited.&lt;/p&gt;

&lt;p&gt;Another point worth mentioning is that you can also take on some more difficult tasks, like algorithmic problem solving, and improve your problem 
solving skills, brushing upon those algorithms you have probably not used anymore since college/university, learning new ones, getting reads for a 
technical interview for top companies and so on.&lt;/p&gt;

&lt;p&gt;Have a look at these links (there are many more out there, just google &lt;em&gt;coding challenges&lt;/em&gt;) and give it a try:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com&quot;&gt;hakerrank&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codewars.com&quot;&gt;codewars&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/&quot;&gt;leetcode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another resource worth mentioning, which I totally love, is &lt;a href=&quot;https://www.jetbrains.com/academy/&quot;&gt;JetBrains Academy&lt;/a&gt;. You can become a fully fledged Java Developer by taking the 
Java Developer track. They also offer similar tracks for Python and Kotlin. The best of it is that you can learn to program by creating 
working applications. You also get daily challenges which bring you points also known as gems, which you then can spend. Overall is a wonderful experience, 
one you should not miss.&lt;/p&gt;

&lt;p&gt;As you can see, there are tons of resources to get you going as a programmer or to help you improve as one, you just have to dedicate time to it 
and to practice, because, as we all know, practice makes perfect!&lt;/p&gt;

&lt;p&gt;Now, go and sharpen your skills and do not be afraid to experiment and learn new things!&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">Lately I’ve been taking a keen interest in the idea of writing code and getting better at it, and what I mean by this is not just the fact of writing code itself and making it work, but also improving your coding skills, and the way you code.</summary></entry><entry><title type="html">SonarQube on AWS EC2</title><link href="https://vladflore.github.io/sonarqube" rel="alternate" type="text/html" title="SonarQube on AWS EC2" /><published>2020-06-04T00:00:00+02:00</published><updated>2020-06-04T00:00:00+02:00</updated><id>https://vladflore.github.io/aws-ec2-sonarqube</id><content type="html" xml:base="https://vladflore.github.io/sonarqube">&lt;p&gt;In this post I will share my experience with installing SonarQube on an AWS EC2 instance. What you’ll see below are some steps and hints I followed when setting up a SonarQube Server on an EC2 machine.&lt;/p&gt;

&lt;h3 id=&quot;the-motivation-behind&quot;&gt;The motivation behind&lt;/h3&gt;

&lt;p&gt;I wanted a SonarQube Server running in the cloud so that my GitHub projects could benefit of it. It is always a good idea to have some quality checks performed on your code and some way to drill down through them and get an idea on how good or bad your code is. I also didn’t want to set up my own cloud, so I just sticked with AWS EC2 solution, despite the fact that it is not always for free.&lt;/p&gt;

&lt;p&gt;Make sure to check the documentation and the billing policies to not have any surprises at the end of the month. In case you do not need the instances to run all the time you can stop them and only start them when you need them. A stopped instance is billed differently and less than a running one.&lt;/p&gt;

&lt;p&gt;As I said, I want to use Sonar for my GitHub projects, which means I want it configured specifically to my needs, which are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the quality checks (history) should be persisted, a.k.a, an in-memory database will not suffice. I will use PostgreSQL 12.&lt;/li&gt;
  &lt;li&gt;I want mutation testing (MT) enabled and I want to use the MT rules together with the default rules to check the code. As for the language I will initially start with Java.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having said this, let’s start with the installation.&lt;/p&gt;

&lt;h3 id=&quot;step-1&quot;&gt;Step 1&lt;/h3&gt;

&lt;h4 id=&quot;get-an-aws-ec2-instance-up-and-running&quot;&gt;Get an AWS EC2 instance up and running.&lt;/h4&gt;

&lt;p&gt;There is not much to say here, go to the &lt;a href=&quot;https://console.aws.amazon.com/&quot;&gt;AWS Console&lt;/a&gt;, check the documentation and follow the steps, it’s pretty intuitive and no brainer at all. After having done that - the instance is running and you can SSH into it, proceed with the next step.&lt;/p&gt;

&lt;h3 id=&quot;step-2&quot;&gt;Step 2&lt;/h3&gt;

&lt;h4 id=&quot;prepare-the-ec2-instance-for-sonarqube-installation&quot;&gt;Prepare the EC2 instance for SonarQube installation.&lt;/h4&gt;

&lt;p&gt;You won’t have pretty much anything pre-installed so you’ll have to do it yourself.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; most of the commands require sudo access, so…you have been warned!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;update-the-system&quot;&gt;Update the system&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;install-unzip-tool&quot;&gt;Install unzip tool&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;unzip&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;install-java-11&quot;&gt;Install Java 11&lt;/h4&gt;

&lt;p&gt;SonarQube 8.3 requires Java - Oracle JRE 11 or OpenJDK 11 - installed on the machine, I’ll go with OpenJDK.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openjdk-11-jdk&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;install-postgresql-12&quot;&gt;Install PostgreSQL 12&lt;/h4&gt;

&lt;p&gt;Bbefore running the command &lt;em&gt;add the PostgreSQL apt repository&lt;/em&gt; as documented &lt;a href=&quot;https://www.postgresql.org/download/linux/ubuntu/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;postgresql-12&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;prepare-postgresql-for-sonarqube&quot;&gt;Prepare PostgreSQL for SonarQube&lt;/h4&gt;

&lt;p&gt;This basically means creating the user and the database.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# change current user to postgres&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (this was created for you as part of the PostgreSQL installation)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;su - postgres
&lt;span class=&quot;c&quot;&gt;# go into PostgreSQL&lt;/span&gt;
psql&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--- create the user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sonarqube&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'yourPassword'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--- create the database&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sonarqube&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OWNER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sonarqube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--- grant the privileges&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sonarqube&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sonarqube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--- exit PostgreSQL&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;add-inbound-rule-for-the-security-group-the-instance-belongs-to&quot;&gt;Add inbound rule for the security group the instance belongs to&lt;/h4&gt;

&lt;p&gt;In order to allow requests to be made to SonarQube you have to add an inbound rule for the security group the EC2 instance belongs to. Find the security group your instance has (on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Instances&lt;/code&gt; page, check for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Security Groups&lt;/code&gt; column in the table which displays your instances, go to that SG and edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Inbound Rules&lt;/code&gt; by adding a new one for &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt; and port &lt;code class=&quot;highlighter-rouge&quot;&gt;9000&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;step-3&quot;&gt;Step 3&lt;/h3&gt;

&lt;h4 id=&quot;download-the-sonarqube-server&quot;&gt;Download the SonarQube Server.&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.3.0.34182.zip
unzip sonarqube-8.3.0.34182.zip
&lt;span class=&quot;c&quot;&gt;# move the unzipped folder under /opt&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mv &lt;/span&gt;sonarqube-8.3.0.34182 /opt/sonarqube&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-4&quot;&gt;Step 4&lt;/h3&gt;

&lt;h4 id=&quot;create-user-for-sonarqube&quot;&gt;Create user for SonarQube.&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;adduser &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-create-home&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--disabled-login&lt;/span&gt; sonarqube
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; sonarqube:sonarqube /opt/sonarqube&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-5&quot;&gt;Step 5&lt;/h3&gt;

&lt;h4 id=&quot;configure-sonarqube-properties-and-launch-scripts&quot;&gt;Configure SonarQube properties and launch scripts.&lt;/h4&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;sonar.properties&lt;/code&gt; and add the following properties:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vi /opt/sonarqube/conf/sonar.properties&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sonar.jdbc.username=sonarqube
sonar.jdbc.password=yourPassword
sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube
sonar.web.javaAdditionalOpts=-server
sonar.web.host=0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;sysctl.conf&lt;/code&gt; and set the property &lt;code class=&quot;highlighter-rouge&quot;&gt;vm.max_map_count&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;262144&lt;/code&gt;. SonarQube will most likely not start without it!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vi /etc/sysctl.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vm.max_map_count=262144
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;sonar.sh&lt;/code&gt; and set the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN_AS_USER&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;sonarqube&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;vi /opt/sonarqube/bin/linux-x86-64/sonar.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN_AS_USER=sonarqube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point you should have everything in place to be able to start the SonarQube and access it in the browser.&lt;/p&gt;

&lt;h4 id=&quot;start-sonarqube&quot;&gt;Start SonarQube&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# navigate to the Sonar installation location&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt/sonarqube/bin/linux-x86-64
&lt;span class=&quot;c&quot;&gt;# start Sonar&lt;/span&gt;
./sonar.sh start&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Call &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&amp;lt;IPv4 Public IP&amp;gt;:9000/&lt;/code&gt; in the browser, where &lt;code class=&quot;highlighter-rouge&quot;&gt;IPv4 Public IP&lt;/code&gt; stands for the public IP, which you can take from the Description information of your EC2 instance. 
You should see your SonarQube page.&lt;/p&gt;

&lt;p&gt;Now let’s configure Sonar.&lt;/p&gt;

&lt;h4 id=&quot;configure-sonarqube&quot;&gt;Configure SonarQube&lt;/h4&gt;

&lt;p&gt;First step is to &lt;em&gt;enable the mutation testing support&lt;/em&gt;, which means that you have to &lt;em&gt;install a plugin&lt;/em&gt;.
For this, login with the default credentials &lt;code class=&quot;highlighter-rouge&quot;&gt;admin/admin&lt;/code&gt;, go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Administration -&amp;gt; Marketplace&lt;/code&gt; and search for &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutation Analysis&lt;/code&gt; &lt;a href=&quot;https://github.com/devcon5io/mutation-analysis-plugin&quot;&gt;plugin&lt;/a&gt; and install it.
Restart the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/sonar-mt-plugin.png&quot; alt=&quot;sonar-mt-plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a new &lt;em&gt;quality profile&lt;/em&gt;, which will contain the &lt;em&gt;default SonarQube Java rules&lt;/em&gt; and the &lt;em&gt;Mutation Analysis rules&lt;/em&gt; and set it as the &lt;em&gt;default profile for Java&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Follow the steps listed in &lt;a href=&quot;https://dzone.com/articles/mutation-testing-with-sonarqube&quot;&gt;this article&lt;/a&gt; under the section &lt;em&gt;Enable the Mutation Analysis Rules&lt;/em&gt; to achieve the above mentioned.&lt;/p&gt;

&lt;p&gt;When finished it should look something similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/sonar-mt-java-rules.png&quot; alt=&quot;sonar-mt-plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now SonarQube should be able to interpret the mutation testing results too.&lt;/p&gt;

&lt;p&gt;Before drilling down through your project and hunting down your mutations you have to upload the mutation analysis for the project in question.&lt;/p&gt;

&lt;p&gt;I am using Maven as a build automation tool for my project and my &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; is updated accordingly.&lt;/p&gt;

&lt;p&gt;At a minimum, you need the &lt;code class=&quot;highlighter-rouge&quot;&gt;pitest-junit5-plugin&lt;/code&gt; dependency, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sonar-maven-plugin&lt;/code&gt; plugin and the &lt;code class=&quot;highlighter-rouge&quot;&gt;pitest-maven&lt;/code&gt; plugin. For Java code coverage do not forget about &lt;code class=&quot;highlighter-rouge&quot;&gt;jacoco-maven-plugin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href=&quot;https://github.com/vladflore/gildedrose-refactoring-kata/blob/master/pom.xml&quot;&gt;GitHub repo&lt;/a&gt; to see how the pom.xml looks like.&lt;/p&gt;

&lt;p&gt;After your project is all set up, the following command should suffice to perform a code analysis of your code. Note that the value for &lt;code class=&quot;highlighter-rouge&quot;&gt;sonar.host.url&lt;/code&gt; should be changed
accordingly to contain the IP of your EC2 instance hosting the SonarQube Server.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;mvn clean verify org.pitest:pitest-maven:mutationCoverage sonar:sonar &lt;span class=&quot;nt&quot;&gt;-Dsonar&lt;/span&gt;.host.url&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://&amp;lt;IPv4 Public IP&amp;gt;:9000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And voilà the analysis of my project at that point in time (including the mutation analysis):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/images/sonar-analysis.png&quot; alt=&quot;sonar-mt-plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now go write those unit tests, kill those mutants and reach a 90%+ code coverage. I dare you! ;)&lt;/p&gt;

&lt;p&gt;Happy code crafting!&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">In this post I will share my experience with installing SonarQube on an AWS EC2 instance. What you’ll see below are some steps and hints I followed when setting up a SonarQube Server on an EC2 machine.</summary></entry><entry><title type="html">Time to Learn</title><link href="https://vladflore.github.io/best-time-to-learn" rel="alternate" type="text/html" title="Time to Learn" /><published>2020-04-14T00:00:00+02:00</published><updated>2020-04-14T00:00:00+02:00</updated><id>https://vladflore.github.io/best-time-to-learn</id><content type="html" xml:base="https://vladflore.github.io/best-time-to-learn">&lt;p&gt;&lt;em&gt;There is no better time than now&lt;/em&gt;, or at least this is what they say and I kind of tend to agree with it. If I wanted to really stretch it, I would say that the best time was &lt;em&gt;yesterday&lt;/em&gt; and the next best time is &lt;em&gt;now&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This applies also to learning, especially learning and even more so if you are in the Information Technology / Computer Science field, as I am.&lt;/p&gt;

&lt;p&gt;Because I am currently enjoying some free time from work and having even less distractions as before, please read &lt;em&gt;Coronavirus (COVID-19)&lt;/em&gt;, I decided to tackle different subjects or start/continue with different projects and areas of interests, which up until now didn’t get the time they really deserved.&lt;/p&gt;

&lt;p&gt;So in this short post I will list some of the things I took upon myself, maybe some of them will rise your interest too. This list will most likely change, but currently this is what I’m keeping myself busy with:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;What&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;Preparing for &lt;a href=&quot;https://education.oracle.com/java-se-8-programmer-ii/pexam_1Z0-809&quot;&gt;Java 8 OCP&lt;/a&gt; exam&lt;/del&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Preparing for &lt;a href=&quot;https://tanzu.vmware.com/training/certification/spring-professional-certification&quot;&gt;Spring Professional Certification&lt;/a&gt; exam&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;Working through &lt;a href=&quot;https://www.coursera.org/specializations/software-design-architecture&quot;&gt;Coursera Software Architecture and Design Specialization&lt;/a&gt;&lt;/del&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;Working through &lt;a href=&quot;https://app.pluralsight.com/paths/skill/domain-driven-design&quot;&gt;Pluralsight Domain Driven Design Path&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;following up with Eric Evans’s and Vaughn Vernon’s books&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Getting acquainted with the &lt;a href=&quot;https://www.vim.org/&quot;&gt;vim&lt;/a&gt; text editor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Going through &lt;a href=&quot;https://missing.csail.mit.edu/&quot;&gt;the missing semester of your CS education&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Working through &lt;a href=&quot;https://school.cucumber.io/courses/bdd-with-cucumber-java&quot;&gt;BDD with Cucumber (Java)&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This is just a top 7, but much more is in the pipeline. It is kind of overwhelming if you think at all the possibilities to educate yourself and to boost your carreer. With so many online platforms offering education, more or less for free, it is a shame not to try out one or two things…or seven ;)&lt;/p&gt;

&lt;p&gt;Do take a look at &lt;a href=&quot;https://www.coursera.org/&quot;&gt;Coursera&lt;/a&gt;, &lt;a href=&quot;https://www.udemy.com/&quot;&gt;Udemy&lt;/a&gt;, &lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;, &lt;a href=&quot;https://training.linuxfoundation.org/&quot;&gt;The Linux Foundation&lt;/a&gt;, &lt;a href=&quot;https://openlearning.mit.edu/&quot;&gt;MIT Open Learning&lt;/a&gt;. You are in for a treat!&lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">There is no better time than now, or at least this is what they say and I kind of tend to agree with it. If I wanted to really stretch it, I would say that the best time was yesterday and the next best time is now.</summary></entry><entry><title type="html">Shell Magic</title><link href="https://vladflore.github.io/shell-magic" rel="alternate" type="text/html" title="Shell Magic" /><published>2020-03-25T00:00:00+01:00</published><updated>2020-03-25T00:00:00+01:00</updated><id>https://vladflore.github.io/shell</id><content type="html" xml:base="https://vladflore.github.io/shell-magic">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE 1:&lt;/em&gt;&lt;/strong&gt; This page contains some shell &lt;em&gt;magic&lt;/em&gt; which I came across in my daily business. I will update this page continuously
and this will be reflected on this page in the date information displayed under the post name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE 2:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;Please be advised that some commands listed here could have unwanted effects if you are not completely sure of what they are doing and how they are doing it.
Some of them might also require sudo access, so I am just going to assume that you know what you are doing.
You have been warned!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE 3:&lt;/em&gt;&lt;/strong&gt; All the commands have been tried on &lt;em&gt;Ubuntu 18.04.4 LTS&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-1-forcibly-removing-all-directories-and-their-content-recursively&quot;&gt;&lt;a name=&quot;1&quot;&gt;&lt;/a&gt; 1. Forcibly removing all directories and their content recursively&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^d'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $9}'&lt;/span&gt; | xargs &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In plain English, list the content of the current directory &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; using the long listing format &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt;, filter out everything else that is not a directory &lt;code class=&quot;highlighter-rouge&quot;&gt;grep '^d'&lt;/code&gt;, extract the 9^th^ column (the last containing the name of the directory) &lt;code class=&quot;highlighter-rouge&quot;&gt;awk '{print $9}'&lt;/code&gt;, pass each name of the directory as an argument &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; to the command &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;, which removes recursively &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; and forcibly &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; the respective directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feel free to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; command to read more about the programs above:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man ls&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man grep&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man awk&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man xargs&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man rm&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-2-switching-between-github-remote-urls-https-vs-ssh&quot;&gt;&lt;a name=&quot;2&quot;&gt;&lt;/a&gt; 2. Switching between GitHub remote URLs (HTTPS vs. SSH)&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git remote &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
git remote set-url origin git@github.com:USERNAME/REPOSITORY.git
git remote set-url origin https://github.com/USERNAME/REPOSITORY.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First we check what kind of remote URLs we have, using option &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; of command &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote&lt;/code&gt;,
afterwards we change the remote URL to either HTTPS or SSH using one of the last two commands
(note the two different URL styles for setting the remote name &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;). Do not forget
to replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;REPOSITORY&lt;/code&gt; with the real values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/en/github/using-git/changing-a-remotes-url#switching-remote-urls-from-ssh-to-https&quot;&gt;switching remote urls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-3-searching-for-files-and-creating-an-archive-out-of-them&quot;&gt;&lt;a name=&quot;3&quot;&gt;&lt;/a&gt; 3. Searching for files and creating an archive out of them&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; file1 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; file2 &lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt; | zip -@ &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; files
&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;files.zip ~/tmp
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;
xdg-open .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First we search in the current &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; directory for entries denoting files &lt;code class=&quot;highlighter-rouge&quot;&gt;-type f&lt;/code&gt; having the name &lt;code class=&quot;highlighter-rouge&quot;&gt;-name&lt;/code&gt; &lt;em&gt;file1&lt;/em&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; &lt;em&gt;file2&lt;/em&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; command takes the list of files &lt;code class=&quot;highlighter-rouge&quot;&gt;-@&lt;/code&gt; and creates an archive with the name &lt;em&gt;files&lt;/em&gt; containing only the files without
storing the directories where they reside. After moving &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt; the archive to the &lt;em&gt;tmp&lt;/em&gt; directory we &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into it, &lt;code class=&quot;highlighter-rouge&quot;&gt;$_&lt;/code&gt; references the
last argument of the previous command, and open &lt;code class=&quot;highlighter-rouge&quot;&gt;xdg-open&lt;/code&gt; the current directory &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; with the appropriate program - in my case this is &lt;em&gt;Files&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feel free to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; command to read more about the commands above:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man find&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man zip&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-4-manage-processes-from-the-terminal&quot;&gt;&lt;a name=&quot;4&quot;&gt;&lt;/a&gt; 4. Manage processes from the Terminal&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# display Linux processes&lt;/span&gt;
top

&lt;span class=&quot;c&quot;&gt;# top improved, you might need to install it&lt;/span&gt;
htop

&lt;span class=&quot;c&quot;&gt;# list all running processes and look for a specific process&lt;/span&gt;
ps &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;chrome

&lt;span class=&quot;c&quot;&gt;# display processes in a tree like format&lt;/span&gt;
pstree

&lt;span class=&quot;c&quot;&gt;# look up a process based on name&lt;/span&gt;
pgrep chome

&lt;span class=&quot;c&quot;&gt;# kills process identified by the PID, use -9 or -KILL to force kill&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;kill &lt;/span&gt;PID

&lt;span class=&quot;c&quot;&gt;# kill process given its name&lt;/span&gt;
pkill chrome
killall chrome

&lt;span class=&quot;c&quot;&gt;# allows killing graphical programs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# run it and your cursor will turn into x, then click a program's window&lt;/span&gt;
xkill&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feel free to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; command to read more about the commands above&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-5-print-content-of-path-line-by-line&quot;&gt;&lt;a name=&quot;5&quot;&gt;&lt;/a&gt; 5. Print content of $PATH line-by-line&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pipes the content, obtained via &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;, of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable into the translate &lt;code class=&quot;highlighter-rouge&quot;&gt;tr&lt;/code&gt; command which
replaces each occurrence of &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; with a new line &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;line1:line2 | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;
line1
line2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feel free to use &lt;code class=&quot;highlighter-rouge&quot;&gt;man tr&lt;/code&gt; to read more about the command&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-6-show-all-users&quot;&gt;&lt;a name=&quot;6&quot;&gt;&lt;/a&gt; 6. Show all users&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/passwd | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'{print$1}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The content of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;passwd&lt;/code&gt; is pipped into the &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;, which takes each line
and splits it into columns by the defined &lt;code class=&quot;highlighter-rouge&quot;&gt;-F&lt;/code&gt; separator &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;
printing out the first value (the user name).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man awk&lt;/code&gt; to read more about &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; language&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-7-show-all-hidden-files&quot;&gt;&lt;a name=&quot;7&quot;&gt;&lt;/a&gt; 7. Show all hidden files&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lap&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; / | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $9}'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^\.'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;List &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; all &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; content of the current directory using the long listing format &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; appending &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; a forward slash &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; if the entry is a directory, then print only those lines which do not end with a forward slash (&lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; performs a pattern matching, while &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; inverts the match). &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; prints out the nineth column of the line - the name, and the last &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; shows only those which begin with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;.&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">NOTE 1: This page contains some shell magic which I came across in my daily business. I will update this page continuously and this will be reflected on this page in the date information displayed under the post name.</summary></entry><entry><title type="html">Hello World</title><link href="https://vladflore.github.io/hello-world" rel="alternate" type="text/html" title="Hello World" /><published>2020-02-10T00:00:00+01:00</published><updated>2020-02-10T00:00:00+01:00</updated><id>https://vladflore.github.io/first-post</id><content type="html" xml:base="https://vladflore.github.io/hello-world">&lt;p&gt;Hello Internet,&lt;/p&gt;

&lt;p&gt;so this is my first blog post, which I hope will be one of many more to come. This is more of a &lt;em&gt;hello world&lt;/em&gt; kind of post, 
a way to cut my teeth into blogging and see if it’s something I would like doing.&lt;/p&gt;

&lt;p&gt;Should you wonder by now why &lt;em&gt;hello world&lt;/em&gt;,
well just ask someone who works in IT and has learned at least one programming language.&lt;/p&gt;

&lt;p&gt;The majority of the posts will be of technical nature and will server primarily the purpose of conveying knowledge
that I gathered or stumbled upon over the time.&lt;/p&gt;

&lt;p&gt;Quite often I find myself in the position of having to do something I have already done
before, and quite often I regret not having documented that something…This blog is about changing all that and allowing me
and others to tap into that information I once used/had in order to make use of it again.&lt;/p&gt;

&lt;p&gt;I guess time will tell if this was a worthwhile endeavor or not.&lt;/p&gt;

&lt;p&gt;Happy reading,&lt;/p&gt;

&lt;p&gt;Vlad&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">Hello Internet,</summary></entry><entry><title type="html">Software Craftsmanship</title><link href="https://vladflore.github.io/sw-craftsmanship" rel="alternate" type="text/html" title="Software Craftsmanship" /><published>2020-02-10T00:00:00+01:00</published><updated>2020-02-10T00:00:00+01:00</updated><id>https://vladflore.github.io/software-craftsmanship</id><content type="html" xml:base="https://vladflore.github.io/sw-craftsmanship">&lt;p&gt;Last year I had the opportunity to put together and hold a presentation at a conference organized
by the &lt;a href=&quot;https://www.virtual7.de/&quot; target=&quot;_blank&quot;&gt;company&lt;/a&gt; I am currently working for. As you might have guessed from the post’s title
it was a presentation about the &lt;strong&gt;craftsmanship&lt;/strong&gt; behind &lt;strong&gt;creating software&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Creating software is no easy task, creating software &lt;strong&gt;responsibly&lt;/strong&gt; is even harder, but this should not discourage one to do so.&lt;/p&gt;

&lt;p&gt;By adhering to some healthy coding habits one can and will write code that will not make others cringe when looking at it.
Remember, &lt;strong&gt;we write code for people not for computers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The presentation is powered by &lt;a href=&quot;https://revealjs.com/#/&quot; target=&quot;_blank&quot;&gt;reveal.js framework&lt;/a&gt;, can be watched &lt;a href=&quot;https://vladflore.github.io/software-craftsmanship/#/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and it can be found at this &lt;a href=&quot;https://github.com/vladflore/software-craftsmanship.git&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;Happy crafting!&lt;/p&gt;</content><author><name>Vlad</name></author><summary type="html">Last year I had the opportunity to put together and hold a presentation at a conference organized by the company I am currently working for. As you might have guessed from the post’s title it was a presentation about the craftsmanship behind creating software.</summary></entry></feed>