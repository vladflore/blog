---
layout: post
title: Shell Magic
permalink: /shell-magic
modified_date: 2020-05-17
author: Vlad
comments: true
---

> **_NOTE 1:_** This page contains some shell _magic_ which I came across in my daily business. I will update this page continuously
and this will be reflected on this page in the date information displayed under the post name.

> **_NOTE 2:_** _Please be advised that some commands listed here could have unwanted effects if you are not completely sure of what they are doing and how they are doing it.
Some of them might also require sudo access, so I am just going to assume that you know what you are doing.
You have been warned!_

> **_NOTE 3:_** All the commands have been tried on _Ubuntu 18.04.4 LTS_

<br/>

### <a name="1"></a> 1. Forcibly removing all directories and their content recursively

{% highlight sh %}
ls -l | grep '^d' | awk '{print $9}' | xargs rm -rf
{% endhighlight %}

In plain English, list the content of the current directory `ls` using the long listing format `-l`, filter out everything else that is not a directory `grep '^d'`, extract the 9^th^ column (the last containing the name of the directory) `awk '{print $9}'`, pass each name of the directory as an argument `xargs` to the command `rm`, which removes recursively `-r` and forcibly `-f` the respective directory.

**Resources:**

* feel free to use the `man` command to read more about the programs above:
    * `man ls`
    * `man grep`
    * `man awk`
    * `man xargs`
    * `man rm`
    
---
<br/>

### <a name="2"></a> 2. Switching between GitHub remote URLs (HTTPS vs. SSH)

{% highlight sh %}
git remote -v
git remote set-url origin git@github.com:USERNAME/REPOSITORY.git
git remote set-url origin https://github.com/USERNAME/REPOSITORY.git
{% endhighlight %}

First we check what kind of remote URLs we have, using option `-v` of command `git remote`,
afterwards we change the remote URL to either HTTPS or SSH using one of the last two commands
(note the two different URL styles for setting the remote name `origin`). Do not forget
to replace the `USERNAME` and `REPOSITORY` with the real values.

**Resources:**

* [switching remote urls][resource1]

[resource1]: https://help.github.com/en/github/using-git/changing-a-remotes-url#switching-remote-urls-from-ssh-to-https

---
<br/>

### <a name="3"></a> 3. Searching for files and creating an archive out of them

{% highlight sh %}
find . -type f \( -name file1 -o -name file2 \) | zip -@ -j files
mv files.zip ~/tmp
cd $_
xdg-open .
{% endhighlight %}

First we search in the current `.` directory for entries denoting files `-type f` having the name `-name` _file1_ or `-o` _file2_.
The `zip` command takes the list of files `-@` and creates an archive with the name _files_ containing only the files without
storing the directories where they reside. After moving `mv` the archive to the _tmp_ directory we `cd` into it, `$_` references the
last argument of the previous command, and open `xdg-open` the current directory `.` with the appropriate program - in my case this is _Files_.

**Resources:**

* feel free to use the `man` command to read more about the commands above:
    * `man find`
    * `man zip`

---
<br/>

### <a name="4"></a> 4. Manage processes from the Terminal

{% highlight sh %}
# display Linux processes
top

# top improved, you might need to install it
htop

# list all running processes and look for a specific process
ps -A | grep chrome

# display processes in a tree like format
pstree

# look up a process based on name
pgrep chome

# kills process identified by the PID, use -9 or -KILL to force kill
kill PID

# kill process given its name
pkill chrome
killall chrome

# allows killing graphical programs
# run it and your cursor will turn into x, then click a program's window
xkill
{% endhighlight %}

**Resources:**

* feel free to use the `man` command to read more about the commands above

---
<br/>

### <a name="5"></a> 5. Print content of $PATH line-by-line

{% highlight sh %}
echo $PATH | tr ':' '\n'
{% endhighlight %}

Pipes the content, obtained via `echo`, of the `PATH` variable into the translate `tr` command which
replaces each occurrence of `:` with a new line `\n`.

Another example:

{% highlight sh %}
echo line1:line2 | tr ':' '\n'
line1
line2
{% endhighlight %}

**Resources:**

* feel free to use `man tr` to read more about the command

---
<br/>

### <a name="6"></a> 6. Show all users

{% highlight sh %}
cat /etc/passwd | awk -F: '{print$1}'
{% endhighlight %}

The content of the file `passwd` is pipped into the `awk`, which takes each line
and splits it into columns by the defined `-F` separator `:`
printing out the first value (the user name).

**Resources:**

* `man awk` to read more about `awk` language

---
<br/>

### <a name="7"></a> 7. Show all hidden files

{% highlight sh %}
ls -lap | grep -v / | awk '{print $9}' | grep '^\.'
{% endhighlight %}

List `ls` all `-a` content of the current directory using the long listing format `-l` appending `-p` a forward slash `/` if the entry is a directory, then print only those lines which do not end with a forward slash (`grep` performs a pattern matching, while `-v` inverts the match). `awk` prints out the nineth column of the line - the name, and the last `grep` shows only those which begin with a `.`.

